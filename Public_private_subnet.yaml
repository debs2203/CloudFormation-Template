AWSTemplateFormatVersion: 2010-09-09
Description: Creating custom VPC

# Custom VPC with public subnet, private subnet and Internet Gateway

Parameters:

  CustomVpcCidr:
    Type: String
    Default: 10.0.0.0/20

  PrivateSubnetCidr:
    Type: String
    Default: 10.0.0.0/24

  PublicSubnetCidr:
    Type: String
    Default: 10.0.1.0/24

  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'

Resources:

###########
# VPC with Internet Gateway
###########

  CustomVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CustomVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: CustomVPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Custom IGW

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - IGW
      - CustomVPC
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref CustomVPC



###########
# Private Route Table
###########

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: CustomVPC
    Properties:
      VpcId: !Ref CustomVPC
      Tags:
        - Key: Name
          Value: Private Route Table

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PrivateRouteTable
      - IGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PrivateSubnet
    Properties:
      SubnetId:
        Ref: PrivateSubnet
      RouteTableId:
        Ref: PrivateRouteTable

###########
# Private Subnet
###########

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: CustomVPC
    Properties:
      VpcId: !Ref CustomVPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PrivateSubnetCidr
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet


###########
# Public Subnet
###########

  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: CustomVPC
    Properties:
      VpcId: !Ref CustomVPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet


###########
# Public Route Table
###########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: CustomVPC
    Properties:
      VpcId: !Ref CustomVPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
      - IGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicSubnet
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable

###########
# NAT GATEWAY
###########

  NatGateway:
    Type: "AWS::EC2::NatGateway"
    DependsOn: NatPublicIP
    Properties:
      AllocationId: !GetAtt NatPublicIP.AllocationId
      SubnetId: !Ref PublicSubnet

  NatPublicIP:
    Type: "AWS::EC2::EIP"
    DependsOn: CustomVPC
    Properties:
      Domain: vpc



###########
# Web Security Group
###########

  CustomVpcWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: CustomVPC
    Properties:
      GroupName: CustomVPCWeb
      GroupDescription: SSH Access
      VpcId: !Ref CustomVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: CustomVPCWeb_Security

###########
# Database Security Group
###########

  CustomVpcDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: CustomVPC
    Properties:
      GroupName: CustomVPCDB
      GroupDescription: SSH & MySQL Access
      VpcId: !Ref CustomVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: CustomVPCDB_Security



  Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmazonLinuxAMIID
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref CustomVpcWebSecurityGroup
      Tags:
        - Key: Name
          Value: customVPCEC2
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          amazon-linux-extras install nginx1.12
          systemctl start nginx
          systemctl enable nginx
          chmod 2775 /usr/share/nginx/html
          find /usr/share/nginx/html -type d -exec chmod 2775 {} \;
          find /usr/share/nginx/html -type f -exec chmod 0664 {} \;
          # script to get the demo Nginx Webserver
          cat << 'EOF' > /usr/share/nginx/html/index.html
            <!DOCTYPE html>
            <html>
              <body>
            
                <h1>My First Nginx Web Server</h1>
            
                <p>CGi Assigment </p>
            
              </body>
            </html>
          EOF